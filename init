#!/usr/bin/python
import json
from subprocess import call
import shlex
import os.path

path = "/home/sskcpclient/"
CONFIG_FILE = path + "config.json"
SS_CF_FILE = path + "ss.cfg"


def command_runner(_cmdlist):
	# TODO
	for key in sorted(_cmdlist.iterkeys()):
		print "calling " + key
		print _cmdlist[key]
		call(_cmdlist[key], shell=True) 

def loadConfig(config_file):
	if os.path.isfile(config_file) == False:
		print "File " + config_file + " Not Found!"
		config = {}
	else:
		config = json.loads(open(config_file).read())
	return config

def generatePenCMD(config):
	max_conn = config["pen"]["max_connection"]
	balancer =[v["localaddr"] for k,v in config["kcp"].items()]
	port = str(config["ss"]["server_port"])
	pen_cmd = "pen -f -r -x " + max_conn + " 127.0.0.1:" + port
	for i in balancer:
		pen_cmd = pen_cmd + " " + i 
	return pen_cmd

def generateKcpCF(config):
	data = config["kcp"]
	KcpCF = []
	for k, datum in data.items():
		filename = path + k + ".cfg"
		with open(filename, 'w') as outfile:
			json.dump(datum, outfile)
			KcpCF.append(filename)
	return KcpCF


def generateShadowsocksCF(config):
	data = config["ss"]
	with open(SS_CF_FILE, 'w') as outfile:
		json.dump(data, outfile)

def command_generater():
	config = loadConfig(CONFIG_FILE)

	_cmdlist = {}

	# kcp cmd
	kcp_cfgs = generateKcpCF(config)
	for kcp_config_file in kcp_cfgs:
		_cmdlist[kcp_config_file] = "client_linux_amd64 -c " + kcp_config_file + " &"
	# pen cmd
	_cmdlist["pen"] = generatePenCMD(config) + " &"

	# ss cmd
	generateShadowsocksCF(config)
	_cmdlist["ss"] = "ss-redir -c " + SS_CF_FILE

	return _cmdlist

command_runner(command_generater())
